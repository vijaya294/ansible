- name: creating ec2 instances and route 53 records
  hosts: web
  connection: local
  vars: 
    subnet_id: "subnet-0da9660e21811cf96"
    sg_id: "sg-068011fe9c7d758b6"
    ami_id: "ami-09c813fb71547fc4f"
    instances:
    - frontend
    - backend
    - mysql
  zone: daws81s.online
    
  tasks:
  - name: create ec2 instance
    amazon.aws.ec2_instance:
      name: 
      vpc_subnet_id: "{{ subnet_id }}"
      instance_type: "t3.micro"
      security_group: "{{ sg_id }}"
      image_id: "{{ ami_id }}"
    loop: "{{ instances }}"
    register: ec2_instances

    # if you run this script SP will ask you to install python dependencies called botocore and boto3 [because if you want to connect ansible to aws you need to install python dependencies like boto3 and botocore]
    # command: ansible --version
    # pip3.9 install boto3 botocore
    # now you will get unable to locate credentials because inorder to connect to aws you need some credentials like access key and secure key
    # goto aws console  --  iam  --  access management  --  users  --  create user  --  user name:ansible  --  attach policies directly  --  policy name:administration access  --  next  --  create user
    # goto ansible  --  security credentials  --  create access key  --  command line interface
    # acccess key  :  AKIAW3MECQB25WNID3OB
    # secret key  :  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
    # give these credentials in SP and region : us-east-1 and the command is : aws configure
    # follw the command : ansible-playbook -i inventory.ini 21.create-ec2-rt53.yaml

    # o/p is  :   TASK [create ec2 instance] ***********************************************************************************************************
#                 ok: [172.31.38.167] => (item=frontend)
#                 ok: [172.31.38.167] => (item=backend)
#                 ok: [172.31.38.167] => (item=mysql)

# so 3 servers are created

  - name: print the output
    ansible.builtin.debug:
      msg: "{{ ec2_instances }}"
  
  - name: create r53 records
    amazon.aws.route53:
      state: present
      zone: "{{ zone }}"
      record:"{{  item.item }}" #mysql.daws81s.online
      type: A
      ttl: 1
      value: "{{ item.instances[0].private_ip_address }}"
      wait: true
      overwrite: true

    loop: "{{ ec2_instances.results }}"


